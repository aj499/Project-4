package project;

import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;//I think this is the right class to use; change later?
import java.util.HashMap;

import javax.swing.JPanel;

public class MapPanel extends JPanel implements ActionListener{

	public enum Continent{
		WORLD, NORTH_AMERICA, SOUTH_AMERICA, EUROPE, AFRICA, ASIA;
	}
	
	public enum MapMode{
		ECONOMIC, HEALTH; //TODO: rename later as appropriate to content?
	}
	
	/* --||-- BEGIN VARIABLES --||-- */
	
	//to make Eclipse shut up about the warning
	private static final long serialVersionUID = 1l;
	
	private DataManager worldData;
	
	//Width of the window
	private final static int width = 600;
	//Height of the window
	private final static int height = 700;
	
	//
	private Continent currentView;//which continent are we looking at?
	private String currentCountry;//what country are we looking at right now?
	private MapMode currentMapMode;//what mode is the map in?
	private HashMap<String, AppButton> buttons;//a hash of all the buttons for the countries
	
	//images for the Maps
	private BufferedImage worldMapEconomic;
	private BufferedImage worldMapHealth;
	//and so on for each continent
	
	//buttons for the UI
	//NB: these must be AppButtons or actionPerformed will break!
	private AppButton mapModeChangeButton;
	private AppButton quizButton;
	private AppButton backButton;//go back to world view from continentView
	
	/* --||-- END VARIABLES --||-- */
	
	/**
	 * Creates a new MapPanel based on data from the given DataManager.
	 * 
	 * @param newWorldData the DataManager to load data from
	 */
	public MapPanel(DataManager newWorldData){
		//TODO: do Swing set up here as necessary
		//ie width, height setting, etc
		
		//assign DataManager
		worldData = newWorldData;
		
		//delegate to helper function for rest of setup
		init();
	}
	
	/**
	 * Sets up a MapPanel.
	 * Helper function for the constructor.
	 * <p>
	 * (Assumes that worldData has been set previously.)
	 */
	private void init(){
		setSize(width, height);
		//set default values for what we're looking at
		currentView = Continent.WORLD;
		currentCountry = "none";
		currentMapMode = MapMode.ECONOMIC;
		
		setBackground(Color.black);

	}
	
	/**
	 * Fill the InfoBox with the given data on a country.
	 * 
	 * @param newCountry the data to display about the given country
	 */
	public void updateInfoBox(CountryData newCountry){
		//TODO: implement this once layout is done
		
		//clear the infobox
		
		//extract data from the CountryData and format it appropriately
		//then add it
	}
	
	/**
	 * Respond to events generated by the UI
	 * 
	 * @param e the ActionEvent that represents the event that occurred
	 */
	public void actionPerformed(ActionEvent e){
		System.out.println("Event " + e.toString() + " did the thing!");
		
		//if the button clicked was the button for a country
		if(buttons.containsKey(((AppButton) e.getSource()).getId())){//hopefully this cast works…make all buttons AppButtons to ensure that
			String countryClicked = ((AppButton) e.getSource()).getId();
			
			//change currentCountry appropriately
			currentCountry = countryClicked;
			
			//update the info box
			//updateInfoBox(worldData.getDataForCountry(countryClicked));
		} else if(e.getSource().equals(backButton)){//back button
			if(currentView != Continent.WORLD){//we only need to change things if we're not in world view
				//go back to World view
				currentView = Continent.WORLD;
				
				//update the display layer appropriately
				//TODO: implement once the layout is known/how to work with it
				//something like
				if(currentMapMode == MapMode.ECONOMIC){
					//load economic world map
				} else if(currentMapMode == MapMode.HEALTH){
					//load health world map
				}
			}
		}
		
		//TODO: track mouse movement so we can check for clicks on continents
	}
	
}//class MapPanel
